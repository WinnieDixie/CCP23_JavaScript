Notes started 2/10
Key : () operation
      [] equation
      - many words
      ____ page break
__________________
Commenting on JavaScript code
//This is an in-line comment.
/* This is a multi-line comment */
__________________
Data Types
-undefined
variables are declared with the initial value of undefined
-null

-boolean

-string
"12"
-symbol

-bigint

-number
12
-object

Variables allow computers to store and manipulate data. (var)
Can not start with numbers or have spaces. 
var myName;

__________________
Storing Values in Variables
assignment (=)
var a;
a = 7;

__________________
Assigning the value of one variable to another
var a;
a = 7;
var b;
b = a;
Be careful of order

__________________
Initialize variables with the assignment operator
var a = 9;

__________________
Declare string Variables
-string literal
a series of zeros or characters enclosed in single or double quotes.
var myFirstName = "Your first name";
var myLastName = "Your last name";

__________________
Uninitialized variables
JavaScript variables are declared with the initial value of undefined.
If used in a mathematical operation; result will be NaN.
BEFORE
var a;
var b;
var c;
a = a + 1;
b = b + 5;
c = c + "String!";

AFTER
var a = 5;
var b = 10;
var c = "I am a";
a = a + 1;
b = b + 5;
c = c + "String!";

__________________
Case Sensitivity in Variables
all variables and function names are case sensitive.
MYVAR /= MyVar or myvar
Best Practice is camelCase
BEFORE
var StUdLyCapVaR;
var properCamelCase;
var TitleCaseOver;
STUDLYCAPVAR = 10;
PRoperCAmelCAse = "A String";
tITLEcASEoVER = 9000;

AFTER
var studlyCapVar;
var properCamelCase;
var titleCaseOver;
studlyCapVar = 10;
properCamelCase = "A String";
titleCaseOver = 9000;

__________________
(var) can overwrite variable declarations
(let) a variable with the same nae can only be declared

__________________
(const) can declare variables are read-only

__________________
const myVar = 5 + 10;
const sum = 10 + 10;
const different = 45 - 33;
const product = 8 * 10;
const quotient = 66 / 33;

__________________
(++) operator add one to variable
[i++] === [i = i + 1]
(--) operator minus one to variable
[i--] === [i = i - 1]
*has to be touching*
*no equal sign above stated only*

__________________
Decimal numbers nickname are floats or floating point numbers
*use caution, when you compute numbers they are computed with finite precision. may lead to different outcomes*
const ourDecimal = 5.7;
let myDecimal = 5.7;
*you can use (let) (const) (var)*

Multiply decimals
const product = 2.0 * 2.5;

Divide decimals
const quotient = 4.4 / 2.0;

Remainders is the percentage
5 % 2 = 1
5 / 2 = 2 remainder 1
2 * 2 = 4
5 - 4 = 1
const remainder =  11 % 3 
11 % 3 = 2
11 / 3 = 3 remainder 2
3 * 3 = 9
11 - 9 = 2

__________________
Compound with Augmented Addition
let a = 3;
let b = 17;
let c = 12;
~~~
a = a + 12;
b = 9 + b;
c = c + 7;
~~~
a += 12;
b += 9;
c += 7;

Compound with Augmented Subtraction
let a = 11;
let b = 9;
let c = 3;
~~~
a = a - 6;
b = b - 15;
c = c - 1;
~~~
a -= 6;
b -= 15;
c -= 1;

Compound with Augmented Multiplication
let a = 5;
let b = 12;
let c = 4.6;
~~~
a = a * 5;
b = 3 * b;
c = c * 10;
~~~
a *= 5;
b *= 3;
c *= 10;

Compound with Augmented Division
let a = 48;
let b = 108;
let c = 33;
~~~
a = a / 12;
b = b / 4 ;
c = c / 11;
~~~
a /= 12;
b /= 4;
c /= 11;

__________________
Escaping Literal Quotes in Strings

